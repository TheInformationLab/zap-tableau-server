const request = require('request');

const testAuth = (z , bundle) => {
  return z.request({
      url: bundle.authData.serverUrl + "/api/"+bundle.authData.apiVersion+"/sites",
    }).then((response) => {
      if (response.status === 401) {
        throw new Error('Not authorised to use the api');
      }
      return response.json;
    });
};

const getCredentials = (z, bundle) => new Promise((resolve, reject) => {
	var options = {
		method: 'GET',
  	url: 'https://tableauserver.theinformationlab.co.uk/api/2.4/serverInfo',
  	headers:
   	{
     	Accept: 'application/json'
		}
	};

	request(options, function (error, response, body) {
	  if (error) reject(error);
		z.console.log('[getCredentials - serverInfo] body:', body);
		if (body && JSON.parse(body) && JSON.parse(body).serverInfo) {
			const apiVersion = JSON.parse(body).serverInfo.restApiVersion;
			bundle.authData.apiVersion = apiVersion;
			z.console.log('[getCredentials] apiVersion', apiVersion);
			const settings = {
				method: 'POST',
				url: bundle.authData.serverUrl + "/api/"+bundle.authData.apiVersion+"/auth/signin",
				headers: {"User-Agent":"Zapier","Content-Type":"application/json","Accept":"application/json"}
			}
			if (bundle.authData.username && bundle.authData.username.length > 0) {
				settings.body = '{"credentials":{"name":"'+bundle.authData.username+'","password":"'+bundle.authData.password+'","site":{"contentUrl":"'+(bundle.authData.site || '')+'"}}}';
			} else {
				settings.body = '{"credentials":{"personalAccessTokenName":"'+bundle.authData.personalAccessTokenName+'","personalAccessTokenSecret":"'+bundle.authData.personalAccessTokenSecret+'","site":{"contentUrl":"'+(bundle.authData.site || '')+'"}}}';
			}
			z.console.log('[getCredentials] settings', settings);
			z.request(settings)
				.then(response => {
					z.console.log(response);
			    if (response.status === 401) {
			      reject('The access token or username/password you have supplied is invalid');
			    }
			    resolve({
			      creds: response.json.credentials
			    })
				})
				.catch(reject);
		} else {
			reject('Get server info failed');
		}
	});
});

const getSessionKey = (z, bundle) => {
  return getCredentials(z, bundle)
		.then(response => {
			z.console.log(response);
	    if (!response.creds) {
	      throw new Error('Authentication error. No creds.');
	    }
	    return response;
  	})
		.catch(error => {throw new Error('Authentication error', error)});
};

const credentialFields = (z, bundle) => {
  const response = z.request('https://example.com/api/v2/fields.json');
  // json is is [{"key":"field_1"},{"key":"field_2"}]
  return response.then(res => res.json);
};

module.exports = {
  type: 'session',
  // "test" could also be a function
  test: testAuth,
  fields: [
    {
      key: 'serverUrl',
      type: 'string',
      required: true,
      helpText: 'Your Tableau Server URL'
    },
    {
      key: 'site',
			label: 'Site Content URL',
      type: 'string',
      required: false,
      helpText: 'Are you connecting to a specific site? Enter the content url'
    },
		{
			key: 'personalAccessTokenName',
			label: 'Personal Access Token Name',
			type: 'string',
			required: false,
			helpText: '[Tableau 2019.4+] The name you gave to your personal access token.'
		},
		{
			key: 'personalAccessTokenSecret',
			label: 'Personal Access Token Secret',
			type: 'password',
			required: false,
			helpText: '[Tableau 2019.4+] Enter the token secret generated by Tableau Server.'
		},
		{
			key: 'username',
			label: 'Username',
			type: 'string',
			required: false,
			helpText: '[pre Tableau 2019.4] Your Tableau Server Username.'
		},
		{
			key: 'password',
			label: 'Password',
			type: 'password',
			required: false,
			helpText: '[pre Tableau 2019.4] Your Tableau Server Password.'
		}
  ],
  sessionConfig: {
    perform: getSessionKey
  },
  connectionLabel: (z, bundle) => {
    return `Tableau Server ${bundle.inputData.serverUrl} [${bundle.inputData.site}]`;
  }
};
